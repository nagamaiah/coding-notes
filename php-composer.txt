
							/** PHP Composer **/

-- Composer is a tool that is used for dependencies management in your PHP Project. Composer is used to autoload files.
-- Composer lets you declare the libraries on which your PHP project depends and manage it for you. 
   It installs and updates the libraries that you need for your project.
-- Composer is strongly inspired by node's npm and ruby's bundler.
-- Vendor directory where all composer dependencies are installed.

-- To quickly install Composer in the current directory

php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
php -r "if (hash_file('sha384', 'composer-setup.php') === '55ce33d7678c5a611085589f1f3ddf8b3c52d662cd01d4ba75c0ee0459970c2200a51f492d557530c71c15d8dba01eae') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
php composer-setup.php
php -r "unlink('composer-setup.php');"


with specific version use following
php composer-setup.php --version=1.0.0-alpha8

Select a specific version channel instead of the default latest stable
php composer-setup.php --2.2

-- Compser can be auto updated to latest stable version using following commands
composer self-update
composer self-update --2.2
php composer.phar self-update --2
sudo composer self-update --1
sudo composer self-update --2

composer self-update --rollback to return to old version

https://stackoverflow.com/questions/24816364/composer-auto-self-update

-- To install it manually with specified dir
sudo php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
sudo php composer-setup.php --install-dir=/usr/bin --filename=composer
--filename can be any filename you wish (mycomposer, nagcomposer, composeTool)

-- To uninstall composer via apt (Advanced Packaging Tool)
sudo apt-get remove composer -y
________________________________________________________________________________________________________________________________________

### Manage PHP Project Dependencies with Composer

-- To install a package use composer require
composer require phpunit/phpunit
composer require phpunit/phpunit:^9.5 --dev  (v9.6.7 is installed)  ^9.5 means  >=9.5.0 and <10.0.0 (below next major version)
composer require phpunit/phpunit:~9.5 --dev  (v9.6.7 is installed)  ~9.5 means  >=9.5.0 and <10.0.0 (last digit will go up)
composer require phpunit/phpunit:~9.5.3 --dev (v9.5.28)  ~9.5.3 means >=9.5.3 and <9.6.0 (last digit will go up. will only update patch version)
composer require phpunit/phpunit --dev ~9.5.3 
composer require middlewares/whoops "^0.4"
composer require psr/log
composer require psr/log:2.3.*  [2.3.any patch (or) fix version that is available]

-- To remove a package use composer remove
composer remove phpunit/phpunit --dev   (development package)
composer remove psr/log

-- Composer install command
Composer install command will install all the dependencies listed in the composer.lock file. 
It will install the exact versions of all the dependencies that were previously installed 
and recorded in the composer.lock file. If there is no composer.lock file present in the project, 
composer install will create one and install the latest versions of all the dependencies.

-- Composer update command
Composer update command will update all the dependencies in the composer.json file to their latest versions 
that match the specified version constraints. If there are no version constraints specified in composer.json, 
it will update to the latest versions of all the dependencies. Additionally, it will also update the 
composer.lock file, which records the exact versions of all the dependencies that were installed.

### Composer version constrains
-- you install with specific or exact version  2.3.6
-- you install with wildcard entry  2.6.*  (2.6.any latest patch version that is available)
-- you can use Tilde (~)  for patch version updates
-- you can use Caret (^) for patch and minor version updates
____________________________________________________________________________________________________________________________________________

### Autoloading Files in PHP

-- Using autoloader we can include required file only. Autoload saves memory space.
-- Basically, when you use a class in your application, the autoloader checks if it’s already loaded, and if not, the autoloader 
       loads the necessary class into memory. So the class is loaded on the fly where it’s needed—this is called autoloading.
--  The spl_autoload_register() function allows you to register functions that will be put into a queue to be triggered 
   sequentially when PHP tries to load classes that are not loaded yet.
-- PHP will execute all the registered autoloader functions sequentially.
-- spl_autoload_register('customLoaderFunction');
   	function customLoaderFunction($class){
		$path = 'Code/'.$class.'.php';
		if(file_exists($path))
		{
			include $path;
		}
	}
-- whenever we create or instantiate object using new keyword , autoloader will catch the class name and pass it to 
   to customLoaderFunction. 
-- When you’re using autoloading, you don’t need to include all the library files manually; you just need to include the autoloader file which contains 
       the logic of autoloading, and the necessary classes will be included dynamically.
-- The problem with the spl_autoload_register() function is that you have to implement the autoloader functions by yourself.


-- Autoloading with Composer. (Composer Autoloading)
-- Specifically, Composer provides four autoloading methods to help load classes and functions in your PHP project. 
	1. files autoloading
	2. classmap autoloading
	3. PSR-0 autoloading
	4. PSR-4 autoloading
-- As per the official Composer documentation, `PSR-4` is the recommended way of autoloading
-- the steps that you need to perform when you want to use Composer autoloading.
	1. Define the composer.json file in the root of your project or library. It should contain  directives based on the type of autoloading.
	2. Run the composer dump-autoload command to generate the necessary files that Composer will use for autoloading.
	3. Include the require 'vendor/autoload.php' statement at the top of the file where you want to use autoloading.

-- Autoloading: The  `files`  Directive (file autoloading)
	{
    		"autoload": {
        			"files": ["lib/Foo.php", "lib/Bar.php"]
    		}
	}
	1. File autoloading works similarly to include or require statements that allow you to load entire source files.
	2. All the source files that are referenced with the files directive will be loaded every time your application runs. 
	     This is useful for loading source files that do not use classes. (useful for helper functions file, bootstrap file)
	3. After you create the composer.json file in your project root with the above contents, you just need to run 
	  the composer dump-autoload command to create the necessary autoloader files.
	4. These will be created under the vendor directory. Finally, you need to include the require 'vendor/autoload.php' 
	   statement at the top of the file where you want to autoload files with Composer


-- Autoloading: The classmap Directive (classmap autoloading)
	{
    	"autoload": {
        		"classmap": ["lib","app/models", "app/services"]
    		}
	}
	1. Classmap autoloading is an improved version of file autoloading. You just need to provide a list of directories, 
	      and Composer will scan all the files in those directories.
	2. For each file, Composer will make a list of classes that are contained in that file, and whenever one of those 
	       classes is needed, Composer will autoload the corresponding file.
	3. Run the composer dump-autoload command, and Composer will read the files in the lib directory to create a map of classes that can be autoloaded.
	4. From now,  whenever you have a new class in the  directory, you need to run the command composer dump-autoload again to regenerate the autoload.php file.

-- Autoloading: PSR-0 
	{
    		"autoload": {
        		"psr-0": {
            		"Tutsplus\\Library": "src"
        			}
    		}
	}
	1. PSR-0 is a standard recommended by the PHP-FIG group for autoloading.
	2. In the PSR-0 standard, you must use namespaces to define your libraries.
	3. The fully qualified class name must reflect the \<Vendor Name>\(<Namespace>\)*<Class Name> structure.
	4. In PSR-0 autoloading, you need to map namespaces to directories.
	5. In the above example, we’re telling Composer that anything which starts with the Tutsplus\Library namespace 
	   should be available in the src\Tutsplus\Library directory.
	6. In PSR-0 autoloading, you must map namespaces to the directory structure. As we discussed in the previous section, 
	      if you want to autoload the Tutsplus\Library\Foo class, it must be located at src\Tutsplus\Library\Foo.php. 
	7. https://stackoverflow.com/questions/24868586/what-are-the-differences-between-psr-0-and-psr-4  (psr-0 vs psr-4)
	

--  `PSR-4 Autoloading Works With Composer` :::

	1. PSR-4 is similar to PSR-0 autoloading in that you need to use namespaces, but you don’t need to mimic the directory structure with namespaces.
	2. In PSR-4 autoloading, you can shorten the directory structure, which results in a much simpler directory structure compared to PSR-0 autoloading.
	4. composer dump-autoload
		PATH vendor/composer/autoload_classmap.php
		Composer dump-autoload won’t download a thing.
		It just regenerates the list of all classes that need to be included in the project (autoload_classmap.php).
		Ideal for when you have a new class inside your project.
	5. composer dump-autoload -o   //https://getcomposer.org/doc/articles/autoloader-optimization.md
		Autoloader optimization
		Class map generation is faster than psr-0/psr-4. no filesystem check needed. the class map returns instantly the path
		Used for only production env.
		If you add a new class, you need run autoload optimize command again to load class loading. Not recommended in devlopment.

	{
		"autoload" : {
		"psr-4" : {
			"App\\" : "App/src"
			}
		},
		"require": {
		"ramsey/uuid": "^4.2",
		"ramsey/uuid-doctrine": "^1.8",
		"psr/log": "^1.1"
			}
	}		
		
	There are a few options to enable this:
	Set "optimize-autoloader": true inside the config key of composer.json
	Call install or update with -o / --optimize-autoloader
	Call dump-autoload with -o / --optimize

	6. Vendor directory where all composer dependencies are installed.

	7. https://stackoverflow.com/questions/24868586/what-are-the-differences-between-psr-0-and-psr-4  (psr-0 vs psr-4)













