
php8 	-> released on November 2020
php8.1  -> released on November 2021
php8.2	-> released on December 2022


php versions list
php 5.0
php 5.1
php 5.2
php 5.3
php 5.4
php 5.5
php 5.6

php 7.0
php 7.1
php 7.2
php 7.3
php 7.4

php 8.0
php 8.1
php 8.2

------------------------------------------------------------------------------------------------------------------------------------------
							What's new in PHP 8 version
1. Constructor Property Promotion

 ## Old syntax
 class MailController {
    public array $data;
    public function __construct(array $data = ["status" => "pending"])
    {
        $this->data = $data;
    }
    public function getMailStatus()
    {
        return $this->data['status'];
    }
  }
  
  $statusArray = ["status" => "sent"];
  $mailObject = new MailController($statusArray);
  echo $mailObject->getMailStatus();
 
 ## New syntax
 class MailController {
    public function __construct(public array $data = ["status" => "pending"])
    {
        //code goes here...
    }
    public function getMailStatus()
    {
        return $this->data['status'];
    }
  }

  $statusArray = ["status" => "sent"];
  $mailObject = new MailController($statusArray);
  echo $mailObject->getMailStatus();




2. Allow ::class syntax on objects
-- To fetch the name (FQN) of a class, we can use the Foo\Bar::class syntax. This RFC proposes to extend the same syntax to objects 
   so that it’s now possible to fetch the name of the class of a given object,
   $object = new stdClass;
   var_dump($object::class); // "stdClass"
 
   $object = null;
   var_dump($object::class); // TypeError
-- With PHP 8, $object::class provides the same result as get_class($object). If $object is not an object, it throws a TypeError exception.

3. PHP Named Arguments
-- Named arguments allow passing arguments to a function based on the parameter name, rather than the parameter position
-- Position (or) Order of params to function doesn't matter.
-- don't have to take their order into consideration, and you can also skip optional parameters!


4. Nullsafe Operator
-- With the addition of the nullsafe operator, we can now have null coalescing-like behaviour on methods!
$dateAsString = $booking->getStartDate()?->asDateTimeString();

5. Match Expressions

6. PHP Union Types 
-- Union types are a collection of two or more types which indicate that either one of those can be used.
-- public function foo(Foo|Bar $input): int|float;
-- Note that void can never be part of a union type, since it indicates "no return value at all". void can only be used as a standalone type
-- nullable unions can be written using |null, or by using the existing ? notation.  ?int -> int|null,  ?string -> string|null
-- public function bar(?Bar $bar): void;    ==>  public function bar(Bar|null $bar): void;
-- we are not allowed to include the ?T notation in union types (?T1|T2 is not allowed and we should use T1|T2|null instead).


----------------------------------------------------------------------------------------------------------------------
		Control Structures

break  -- jump out of loop or terminate loop
continue -- skip iteration or go to next iteration






----------------------------------------------------------------------------------------------------------------------
		PHP include, require, include_once and require_once
		

https://stackoverflow.com/questions/2418473/difference-between-require-include-require-once-and-include-once



----------------------------------------------------------------------------------------------------------------------
						PHP Functions


### Callback function
-- A callback is a function that is to be executed after another function has finished executing
-- A callback function, which is passed as an argument into another function.
-- To use a function as a callback function, pass a string containing the name of the function as the argument of another function.
	array_map('myCallbackFunction', $strings)
-- Starting with version 7, PHP can pass anonymous functions as callback functions:
	array_map( function($item) { return strlen($item); } , $strings);

### Function arguments
-- PHP supports passing arguments by value (the default), passing by reference, and default argument values. 
   Variable-length argument lists and Named Arguments are also supported.
-- PHP 5.6 added the splat operator (...) which is used to unpack arrays to be used as function arguments.



-----------------------------------------------------------------------------------------------------------------------
						Type Hinting (or) Type Declarations in PHP
-- Type declarations can be added to function arguments, return values, and class properties(as of PHP 7.4.0). 
   They ensure that the value is of the specified type at call time, otherwise a `TypeError` is thrown.

### Type hinting for basic data types (or) scalar data types [string, int, bool, float]

-- PHP7 supports scalar type hinting.

	function sampleData(int $number = 3, array $data = ['name' => 'default'], Car $car)
	{
		echo $number.PHP_EOL;
		echo $data['name'];
		var_dump($car);
	}

	class Car
	{
	  // class properties and methods
	}


### Type hinting for php objects and arrays

-- PHP5 doesn’t allow type hinting for basic data types (int, float, string and bool). php5 allows type hinting for object and array data types. 
   Valid types are class names for arguments that receive objects and array for those that receive arrays.

	function enroll(Student $student, array $guests, array $food = null) {

	}
-- Type Hinting is method by which we can force function to accept the desired data type.
-- Type hinting is a concept that provides hints to function for the expected data type of arguments.
-- Type hinting can also be used to force a function to get an argument of type Object. For this purpose,  
   we put the name of the class in front of the argument name in the function.

	




---------------------------------------------------------------------------------------------------------------------------
					Type Casting (Converting one data type to another)


Type casting is converting a variable or value into desired data type.
This is very useful when preforming arithmetic computations that require variables 
to be of same data type.
Type casting in PHP is done by the interpreter. 1+1.1 = 2.01 (automatic casting in php by default).
PHP also allows you to cast the data type. This is known as explicit casting.

Data Types define the type of data a variable can store. PHP data types are loosely coupled.
The type of the data is decided at runtime by PHP depending on the context in which that variable is used.
PHP supports TEN primitive types.

To check type&value of a expression use var_dump() predefined function.
To get a human-readable representation of a type for debugging, use the "gettype()" function. ("For DEBUGGING purpose only").
To check for a certain type, do NOT use gettype(), but rather the is_type (is_int, is_array, ) functions

* Scalar variables are those containing an int, float, string or bool. Types array, object, resource and null are not scalar.
is_scalar — Finds whether a variable is a scalar ->  is_scalar(mixed $value): bool

is_numeric — Finds whether a variable is a number or a numeric string
is_numeric(mixed $value): bool
Returns true if value is a number or a numeric string, false otherwise.

Four scalar or simple datatypes
1. bool
2. int
3. float (floating-point number)
4. string
Four compound types:
5. array
6. object
7. callable
8. iterable
And finally two special types:
9. resource
10. NULL



/*** settype() and gettype() functions in php 

settype — Set the type of a variable. settype(mixed &$var, string $type): bool
Possibles values of type are:
"boolean" or "bool"
"integer" or "int"
"float" or "double"
"string"
"array"
"object"
"null"

gettype — Get the type of a variable. gettype(mixed $value): string

----------------------------------------------------------------------------------------------------------------------
					Date and Time

The PHP date() function converts timestamp to a more readable date and time format.
date(format, timestamp)

d: day of month(two digits with leading zeros 01 or 30)
dS : day(th) 1st 2nd 3rd 4th etc...
D: Represents day of the week in the text as an abbreviation (Mon to Sun).
m: Represents month in numbers with leading zeros (01 or 12).
M: Represents month in text, abbreviated (Jan to Dec).
F : Full month name (October nd December)
y: Represents year in two digits (08 or 14).
Y: Represents year in four digits (2008 or 2014).

time formats
h : 12-hour format (01 to 12)
H : 24-hour format (00 to 23)
i: Represents minutes with leading zeros (00 to 59).
s: Represents seconds with leading zeros (00 to 59).
a: Represents lowercase antemeridian and post meridian (am or pm).
A: Represents uppercase antemeridian and post meridian (AM or PM).

mktime(hour, minute, second, month, day, year)

DateTime::createFromFormat('d/m/t','01/04/2022');
$date = new DateTime()
echo $date->format('d-m-t');

$currentTimezone = date_default_timezone_get();
$setTimezone = date_default_timezone_set('Asia/Kolkata'); IST


----------------------------------------------------------------------------------------------------------------------

Most PHP values can also be converted to strings for permanent storage. This method is called "serialization", 
and is performed by the "serialize()" function.
serialize — Generates a storable representation of a value
To make the serialized string into a PHP value again, use unserialize().

Need to check __sleep and __awake. All magic methods.

PHP arrays ::
The count() function can be used to count the number of items in an array.
PHP 5.6 added the splat operator (...) which is used to unpack arrays to be used as function arguments.

isset() function returns TRUE if var exists and its value is not equal to NULL and FALSE otherwise.

### ternary and Null coalescing(from php7) operator

ternalry operater is conditional operator
ternary --  (expression)? expression1 : expression2
if expression is true -> evalueate to expression1
if expression is false -> evalueate to expression2

The null coalescing operator is available since PHP 7.0. It similar to the ternary operator, but will behave like isset on the lefthand operand 
instead of just using its boolean value. This makes this operator especially useful for arrays and assigning defaults when a variable is not set.
   $unassigned;
   $unassigned ?? 'fallback'; // 'fallback'

   $assigned = 'foo';
   $assigned ?? 'fallback'; // 'foo'

	'' ?? 'fallback'; // ''
	'foo' ?? 'fallback'; // 'foo'
	'0' ?? 'fallback'; // '0'
	0 ?? 'fallback'; // 0
	false ?? 'fallback'; // false
	null ?? 'fallback'; // 'fallback'


----------------------------------------------------------------------------------------
			FileSystem && File Handling in PHP

-- File paths in php
echo 'File : '.__FILE__.'<br>'; 	// C:\xampp\htdocs\coding\App\index.php
echo 'Dir : '.__DIR__.'<br>'; 	// C:\xampp\htdocs\coding\App
echo 'basename of dir : '.basename(__DIR__).'<br>'; 	// App
echo  dirname(__DIR__);	// C:\xampp\htdocs\coding
echo 'basename of file : '.basename(__FILE__).'<br>'; 	// index.php
echo 'basename of file without extension : '.basename(__FILE__, '.php').'<br><br>';  	//index
echo   realpath(__DIR__.'./vendor/autoload.php');     // C:\xampp\htdocs\PSR-4-Autoloading\vendor\autoload.php

echo 'DIR pathinfo : <br>';
print_r(pathinfo(__DIR__));
// Array
// (
//     [dirname] => C:\xampp\htdocs\coding
//     [basename] => App
//     [filename] => App
// )

echo "<br>";
echo 'FILE pathinfo : <br>';
print_r(pathinfo(__FILE__)).'<br><br>';
// Array
// (
//     [dirname] => C:\xampp\htdocs\coding\App
//     [basename] => index.php
//     [extension] => php
//     [filename] => index
// )



$file_handle = fopen("logs.txt", "a");
fwrite($file_handle, print_r($data,true));
chmod('logs.txt',0777);
fclose($file_handle);


-- File upload in php


------------------------------------------------------------------------------------------------------------------------------------------
							Regular Expressions & Regular Expressions in PHP











------------------------------------------------------------------------------------------------------------------------------------------
							Exception Handing







https://php.watch/articles/PHP-exception-hierarchy

https://www.php.net/manual/en/spl.exceptions.php
------------------------------------------------------------------------------------------------------------------------------------------
							PHP OOPs (Object-Oriented Programming System)



### Namespaces and Autoloading (with & without composer).

-- namespace (virtual directory structure) and use 
	1. without namespace definition, fuctions, classes and constants have global scope. With namespace , they have namespace scope, attached to namespace
	2. Fixes the problem of name collisions (classes and functions with same name).
	3. Better structure and organized code.
	4.  __NAMESPACE__ is a string that contains the current namespace name
	5. use --> Aliasing/Importing
	6. To access built-in fuctions in local(current) namespace from global space use backslash(\).  (Ex : \Exception, new \DateTime(), \PDO )
	7. SomeClass::class will return the fully qualified name of SomeClass including the namespace. (php special magic constant ::class)
	   This feature was implemented in PHP 5.5. It's very useful for 2 reasons. 
	   You can use the use keyword to resolve your class and you don't need to write the full class name.
	8. Fallback works for built-in functions and consts. Not for global php Classes.
		Fallback (First check in local namespace, if it fails -> it looks in global namespace or scope).
		Global classes should mention with backslash(\) or use importing classes.

-- Namespace name definitions (or) Name resolution rules
1. Unqualified name : This is an identifier without a namespace separator, such as Foo
2. Qualified name : This is an identifier with a namespace separator, such as Foo\Bar.  Prepend with namespace; 
3. Fully qualified name (prefixed with backslash `\`))
	This is an identifier with a namespace separator that begins with a namespace separator, 
	such as \Foo\Bar. The namespace \Foo is also a fully qualified name.
4. Relative name : This is an identifier starting with namespace, such as namespace\Foo\Bar.
   Relative names always resolve to the name with namespace replaced by the current namespace.





### PHP Magic Constants








### PHP Magic Methods










### PHP class static properties VS constants 
-- In the context of a class, static variables are on the class scope (not the object scope), but unlike a const, their values can be changed.
--  A class static properties and methods are on the class scope (No need to create object to access). They can be accessed 
   using `Scope Resolution` (::) operator.

-- class ClassName {
    	static $my_var = 10;  /* defaults to public unless otherwise specified */
    	const MY_CONST = 5;
	
	public static getPersonName()
	{
	    return 'david';
	}
   }
	echo ClassName::$my_var;   // returns 10
	echo ClassName::MY_CONST;  // returns 5
	ClassName::$my_var = 20;   // now equals 20
	ClassName::MY_CONST = 20;  // error! won't work.

-- Declaring a class method or property as static makes them accessible without needing an instantiation of the class.
-- private, public and protected are `Access Modifiers` that describes who can access which properties/method.
-- public, protected, and private are irrelevant in terms of consts (which are always public); 
   they are only useful for class variables, including static variable.
-- public static variables can be accessed anywhere via ClassName::$variable.
-- protected static variables can be accessed by the defining class or extending classes via ClassName::$variable.
-- private static variables can be accessed only by the defining class via ClassName::$variable.



### PHP object method chaining
-- Method chaining is a fluent interface design pattern used to simplyify your code.
-- Essentially your objects return themselves, allowing you to "chain" multiple actions together.
-- Implementation is extremely simple - simply return the object instance once the method has completed:
	function someMethod (params)
	{
	 /* do stuff */
	 retur $this;
	}	
-- Ex : echo $a->addA()->addB()->getStr();
	  $table->select()->from('foo')->where('bar = 1')->order('ASC);



------------------------------------------------------------------------------------------------------------------------------

/*** PHP Articles or Blogs ***/
https://www.php.net/manual/en/language.types.intro.php
https://www.geeksforgeeks.org/php-data-types/
https://www.php.net/manual/en/language.types.type-juggling.php#language.types.typecasting
https://www.php.net/manual/en/language.types.object.php
https://www.wdb24.com/how-to-upload-csv-and-save-in-mysql-database-using-php/




