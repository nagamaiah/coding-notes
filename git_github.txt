

Generate ssh keys
ssh-keygen -t ed25519 -C "nagamaiah63@gmail.com"

Start the ssh-agent in the background.
eval "$(ssh-agent -s)"

Add your SSH private key to the ssh-agent.
ssh-add ~/.ssh/id_ed25519

Adding a new SSH key to your account
cat ~/.ssh/id_ed25519.pub

Settings -> Access -> SSH and GPG keys -> Add SSH key


If you're cloning GitHub repositories using HTTPS, we recommend you use GitHub CLI or 
Git Credential Manager (GCM) to remember your credentials.

to install github (gh) client 
https://github.com/cli/cli/blob/trunk/docs/install_linux.md

gh --version
gh version 2.22.0 (2023-01-25)
https://github.com/cli/cli/releases/tag/v2.22.0

gh auth login
gh repo view

gh cli url
https://cli.github.com/manual/gh

✓ Authentication complete.
- gh config set -h github.com git_protocol https
✓ Configured git protocol
✓ Logged in as nagamaiah




VCS -> Version Control System
SVN (subversion) -> SVN is a centralized version control system. 
Git		 -> Git is a distributed version control system.

Git (Free and Open source Version Control System).
VCS -- 	To track code changes. We can able to revert changes.
Github - A website to host your git repositories online
Repository - Project (which contains folders & files)
untraked files - newly created files
add - Track your files and changes in git after adding untracked files to git
commit - save your changes or files in git
push - upload your commits to remote repo like github, bitbucket, gitlab etc.,
pull - Download (latest) changes from a remote repo to your local machine


git init
echo "# MESSAGE" >> README.md
git add README.md
git commit -m "first commit"
git config --global init.defaultBranch <name>
git branch -m <name>


## create a new repository on the command line
echo "# javascript-coding" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M master
git remote add origin https://github.com/nagamaiah/javascript-coding.git
git push -u origin master


## push an existing repository from the command line
git remote add origin https://github.com/nagamaiah/javascript-coding.git
git branch -M master
git push -u origin master




### Git Common Workflow
# Start a new feature
git checkout -b new-feature main
# Edit some files
git add <file>
git commit -m "Start a feature"
# Edit some files
git add <file>
git commit -m "Finish a feature"
# Merge in the new-feature branch
git checkout main
git merge new-feature
git branch -d new-feature



-- To make untracked file 
   git rm <filename>	
   git rm --cached <filename>   (remove staging area)
   
-- Show all branch locally
   git branch
   
-- Show remote-tracking branches
   git branch --remotes
   git branch -r
   
-- Show all branch locally and remote
   git branch -a
   git branch -all
   
-- Create a new branch
   git branch <branch-name>
   
-- Checkout(move to another branch) branch 
   git checkout <branch-name>

-- Create a branch and checkout to that branch
   git checkout -b <branch-name>

-- Deleting a local branch
   git branch --delete <branch>
   git branch -d <branch>	-> Shorter version
   git branch -D <branch>	-> Force-delete un-merged branches
    
-- Deleting a remote branch
   git push origin --delete <branch>  # Git version 1.7.0 or newer
   git push origin -d <branch>        # Shorter version (Git 1.7.0 or newer)



A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.

A fork is a copy of a repository that you manage. Forks let you make changes to a project without affecting the original repository. You can fetch updates from or submit changes to the original repository with pull requests.

A fork creates a completely independent copy of Git repository. In contrast to a fork, a Git clone creates a linked copy that will continue to synchronize with the target repository.




