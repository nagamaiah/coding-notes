

1. Laravel is a php framework. It has many resources to learn and code.

2. We have to install composer to develop a laravel app.

3. You can create a new project by using the command.  >>  composer create-project laravel/laravel project_name.

4. Use serve artisan command to run your app. >>  php artisan serve.

5. All of the configuration files for the Laravel framework are stored in the config directory.

6. The majority of your application is housed in the app directory.

7. Think of the Console and Http directories as providing an API into the core of your application. 

8. The Console directory contains all of your Artisan commands, while the Http directory contains your controllers, middleware, and forms requests.

9. php artisan make:listener command generates a Listeners directory. The Listeners directory contains the classes that handle your events.

10. Think of the Kernel as being a big black box that represents your entire application. Feed it HTTP requests and it will return HTTP responses.

11. Service providers are truly the key to bootstrapping a Laravel application. The application instance is created, the service providers are registered, 
    and the request is handed to the bootstrapped application. It's really that simple!

12. The Laravel service container is a powerful tool for managing class dependencies and performing dependency injection.

13. Class dependencies are "injected" into the class via the constructor or, in some cases, "setter" methods.

14. Vendor directory where all composer dependencies are installed.

---------------------------------------------------------------------------------------------------------------------------------------------
			Laravel Install & Setup

1. Laravel is an open-source PHP framework for web development. It's robust and easy to develop & understand. Creator - Taylor Otwell
   It follows the MVC architectural pattern and based on Symfony. Its architechtural patterns are majority based on Symfony.
   The source code of laravel is hosted on github.	

2. We need composer installed in our machine to install laravel. Composer is a PHP dependency manager or Package manager.
   a. Installation via Composer
	composer create-project laravel/laravel myApp
	composer create-project laravel/laravel="5.7.*" myApp
	composer create-project laravel/laravel="9.*" laravel9.5
	composer create-project laravel/laravel="8.5.*" laravel-miniblog  //laravel 8.83.27
	cd myApp
	php artisan serve
   b. Via laravel installer -- you may install the laravel as a global composer dependency.
	composer global require laravel/installer
	laravel new myApp
	cd myApp
	php artisan serve.
	
3. Laravel latest verion is 9 (yr-2022). Laravel5.4 onwards application structure (App directory tree structure) diffenrent than 5.3 & below. 
   Each folder is separated for MVC structure. 
	app/Http/Controller => Contains controller for our App
	app/Providers => Contains service providers.
	config  => Contains configurations for different areas like application,database,filesystem,mail,session,view,services and auth etc,.
	database => Contains Model related files. factories, migrations and seeds.
	resources => Contains views,css and js files. resources/views contains blade.php files with are linked with route and controller.
	routes => Contains route files for web and api. api.php and web.php
	vendor/laravel/framework/src/Illuminate => Contains laravel core files.

4. All of the configuration files for Laravel framework are stored in the `config` directory.

5. Many important configuration values are defined using the .env file that exists at the root of your application.

-----------------------------------------------------------------------------------------------------------------------------------------
			Interesting features of Laravel framework

1. MVC support
2. Built in Authentication & Authorization
3. Packaging System
4. Multiple File System
5. Artisan Console
6. Eloquent ORM
7. Templating Engine
8. Task Scheduling
9. WebSocket Programming
10. Testing
11. Database Query Builder



-----------------------------------------------------------------------------------------------------------------------------------------
			Laravel Service Container
			
Binding Interface - you can bind specific interface and it's implementation into container and resolve it as interface. This is useful for test-friendly code and flexibility - cause you can easily change implementation in one place without changing interface. (For example use some Countable interface everywhere as a target to resolve from container but receive it's implementation instead.)
Dependency Injection - if you will bind class/interface and ask it as a dependecy in some method/constructor - Laravel will automatically insert it from container for you.
Conditional Binding - you can bind interface but depending on the situation resolve different implementations.
Singleton - you can bind some shared instance of an object.
Resolving Event - each time container resolves smth - it raises an event you can subscribe in other places of your project.
	
			
			
			
			
			
			
			
			

-----------------------------------------------------------------------------------------------------------------------------------------
			Laravel View Blade Files

## Laravel View Components
-- to make a view component 
	php artisan make:component Base
-- Created file path
	app/View/Components/Base.php and resources/views/components/base.blade.php
   php artisan make:component Js/Library/Files
   app/View/Component/Js/Library/Files.php  and resources/views/components/js/library/files.blade.php

-- php artisan make:controller UserController --invokable
			
			
			
			
			
			
			
			


-----------------------------------------------------------------------------------------------------------------------------------------
			Laravel Mail Sending
			
-- Laravel provides a clean, simple email API powered by the popular SwiftMailer library.
-- Laravel uses free feature-rich library SwiftMailer to send emails.
-- The e-mail templates are loaded in the same way as views, which means you can use the Blade syntax and inject data into your templates.


## Upto laravel5.2 version
Mail::send(string|array $view, array $data, Closure|string $callback);

//pass data into views
$data  = ["to"=>"nag123@gmail.com",name"=>"nag","place"=>"Hyderabad"];

//message builder instance $message
try{
    Mail::send('emails.welcome', $data, function($message) use ($data) {
        $message->to($data['to'])->subject(ucfirst(app()->env) . ' Customer Reset Password');
    });
} catch(\Exception $e){
    dd($e);
}

try {
      $data = array('sender_name'=>"Nagamaiah");
      $price = 999;
      $palce = 'hyderabad';
      Mail::send('mail', $data, function($message) use ($data,$price) {
         $message->to('nagamaiah63@gmail.com', 'Tutorials Point')->subject
            ($data['sender_name'].' Subject '.$price);
         $message->from('xyz@gmail.com','nag');
      });
      return response("mail sent successfully");

    } catch(\Exception $e) {
        dd($e);
    }


                
## From laravel5.3 onwards mailable classes introduced
-- Mailable classes introduced in laravel5.3 version.
	php artisan make:mail OrderShipped    App\Mail\OrderShipped.php

-- Generating Markdown Mailables   // Generates a mailable class and a markdown template
	php artisan make:mail OrderShipped --markdown=emails.orders.shipped	

-- All of a mailable class configuration is done in the 'build' method. 
   you may call various methods such as from, subject, view, and attach to configure the email's presentation and delivery.
-- pass an instance of your mailable class to the send method:

	Mail::to('nag123@gmail.com')->send(new OrderShipped($order));
	
	Mail::to($request->user())
        ->cc($moreUsers)
        ->bcc($evenMoreUsers)
        ->send(new OrderShipped($order));
        
-- Sending Mail Via A Specific Mailer
	Mail::mailer('postmark')
        ->to($request->user())
        ->send(new OrderShipped($order));
        			
			
## From 'laravel9' onwards we are using 'symfony/mailer' package to send mails.
-- Laravel provides a clean, simple email API powered by the popular Symfony Mailer component.
	Mail::to('example123@gmail.com')->send(new OrderShipped($order));    //  Mail facade  --> Illuminate\Support\Facades\Mail
	 
	Mail::to($request->user())
        ->cc($moreUsers)
        ->bcc($evenMoreUsers)
        ->send(new OrderShipped($order));	 		

-- Mailable class configuration is done in several methods, including the envelope, content, and attachments methods.			
	Illuminate\Mail\Mailables\Envelope
	Illuminate\Mail\Mailables\Content
	Illuminate\Mail\Mailables\Attachment
	Illuminate\Mail\Mailables\Headers			
			



-----------------------------------------------------------------------------------------------------------------------------------------
			Laravel Http Client (guzzlehttp/guzzle package)  
			
-- Laravel provides Guzzle HTTP client, allowing you to quickly make outgoing HTTP requests to communicate with other web applications.
-- Earlier we used cURL(client url) to make http requests in php. Now we have improved package guzzle http client.
-- Laravel provides Http facade to make http requests using guzzlehttp/guzzle package.
-- The get method returns an instance of Illuminate\Http\Client\Response, which provides a variety of methods that may be used to inspect the response.
	static Response get(string $url, array|string|null $query = null)
	static Response post(string $url, array $data = [])
	
	$client = new \GuzzleHttp\Client();
	$request = $client->get('http://testmyapi.com');  (or)
	
	use Illuminate\Support\Facades\Http;
	$response = Http::get('http://example.com');	
	
-- Response instance status code methods (Illuminate\Http\Client\Response)
	$response->ok() : bool;                  // 200 OK
	$response->created() : bool;             // 201 Created
	$response->accepted() : bool;            // 202 Accepted
	$response->noContent() : bool;           // 204 No Content
	$response->movedPermanently() : bool;    // 301 Moved Permanently
	$response->found() : bool;               // 302 Found
	$response->badRequest() : bool;          // 400 Bad Request
	$response->unauthorized() : bool;        // 401 Unauthorized
	$response->paymentRequired() : bool;     // 402 Payment Required
	$response->forbidden() : bool;           // 403 Forbidden
	$response->notFound() : bool;            // 404 Not Found
	$response->requestTimeout() : bool;      // 408 Request Timeout
	$response->conflict() : bool;            // 409 Conflict
	$response->unprocessableEntity() : bool; // 422 Unprocessable Entity
	$response->tooManyRequests() : bool;     // 429 Too Many Requests
	$response->serverError() : bool;         // 500 Internal Server Error
			


-----------------------------------------------------------------------------------------------------------------------------------------
			Laravel Artisan CLI
			
## to make a model with controller and migration 
	php artisan make:model Student -mc
	php artisan make:model Student -mc --resource   --> with resouceful controller						
	php artisan make:model Student -a



-----------------------------------------------------------------------------------------------------------------------------------------
			Laravel FileSystem and File Upload
			

			
			
			
			
			

-----------------------------------------------------------------------------------------------------------------------------------------
			#Laravel Web Authentication

1. Before laravel6 version php artisan make:auth   cmd will create  a auth system
2. For laravel6 and laravel7 we have laravel/ui  package for auth. 
	composer require laravel/ui
	php artisan ui:auth
3. After laravel8 version we have free laravel packages Laravel Breeze, Laravel Jetstream, and Laravel Fortify.
	composer require laravel/breeze
	php artisan breeze:install
	npm install && npm run dev
			
			
			#Laravel Authentication Methods
-- We have Auth facade -> Illuminate\Support\Facades\Auth;
-- Login attempt or authenticate user
	Auth::attempt([$request->only(['email', 'password'])]);
	auth()->attempt(request()->only(['email', 'password'])]);
	if (Auth::attempt(['email' => $email, 'password' => $password, 'active' => 1])) {
	    return redirect('/dashboard');
	}
				
-- Retrieving The Authenticated User
	Auth::user()  or  auth()->user()
	Auth::id()    or  auth()->id()
	Auth::user()->id or auth()->user()->id
	Auth::user()->email or auth()->user()->email
  Alternatively, once a user is authenticated, you may access the authenticated user via an Illuminate\Http\Request instance.
  	$user = $request->user();
  	$user = request()->user();
  	
-- Determining If The Current User Is Authenticated
	if (Auth::check()) {
	    // The user is logged in...
	}
	if(auth->check())
	{
	    // code goes here...
	}
-- Logout methods
	Auth::logout()  or auth()->logout();


-- Protecting routes with guards ->  auth, auth:api, auth:admin, auth:sanctum
	Route::get('/flights', function () {
	    // Only authenticated users may access this route...
	})->middleware('auth:api');
	Route::get('/flights', function () {
	    // Only authenticated users may access this route...
	})->middleware('auth:admin');
	Route::middleware(['auth', 'auth:admin'])->group(function(){
		// Routes goes here...
	});
   In controller __consturct() method we can check auth middleware
   	public function __construct()
   	{
   	   $this->middleware('auth);
   	}


			
			
			#Laravel Api Auth with laravel/passport

-- composer require laravel/passport
-- php artisan migrate
-- php artisan passport:install
-- In your User model (usually located at app/User.php), you should implement the Laravel\Passport\HasApiTokens trait
-- In your config/auth.php configuration file, set the api guard's driver to passport
-- In your routes/api.php file, define the routes that you want to protect with Passport's authentication:
	Route::middleware('auth:api')->group(function () {
	    // Your API routes go here
	});
-- Generate a user token
	$user = User::find(4)  or $user = User::create(['username'=>'tester234', 'password'=>'Test1234'])
	$token = $user->createToken('passport-api-auth-token')->accessToken;
--  middleware check
	->middleware('auth:api')
-- testing with postman
   url  ->  http://local.laravel58.com:8181/api/user
   headers ->  Accept :  application/json
   	       Authorization : Bearer --Token here--
-- We need to update package lcobucci/jwt  for token server error
    composer require lcobucci/jwt:3.3.3
    composer update --with-all-dependencies
    
--  docker exec -it db  mysqldump -ularavel5 --password=secret laravel5 > laravel5.sql
   	
	Personal access client created successfully.
	Client ID: 3
	Client secret: hzqoWkaSPuDUy9VPL3qy357qpGyPAuDDZkfQoqe4
	Password grant client created successfully.
	Client ID: 4
	Client secret: q1uzEqc3YBGbEnVOX38NaCLfkcKjQyjZXpaomiNo
			
			
			
			
			#Laravel Api Auth with laravel/sanctum
			
			
-- Generate a user token
	$user = User::find(4)  or $user = User::create(['username'=>'tester234', 'password'=>'Test1234'])
	$token = $user->createToken('sanctum-api-auth-token')->plainTextToken;			
--  middleware check
	->middleware('auth:sanctum')			
-- Revoking Tokens using Laravel\Sanctum\HasApiTokens trait
	// Revoke all tokens...
	$user->tokens()->delete();
 
	// Revoke the token that was used to authenticate the current request...
	$request->user()->currentAccessToken()->delete();
	 
	// Revoke a specific token...
	$user->tokens()->where('id', $tokenId)->delete();

			
						

-----------------------------------------------------------------------------------------------------------------------------------------
			Laravel Validation
			

	dd($request->only(['email','password','name']));
	dd($request->except(['id','token']));
        $request->validate([
            'name' => 'required|max:255',
            'email' => 'required|unique:users|max:255',
            'password' => 'required|min:4'
        ]);
        
        validator(request()->all(), [
           'email' => ['required', 'email'],
           'password' => ['required']
        ])->validate();

	// Using Validator facade
	Validator::make($request->all(), [
	    'title' => 'required|unique:posts|max:255',
	    'body' => 'required',
	])->validate();

	
	// Using form request class
	php artisan make:request StorePostRequest
	placed in the app/Http/Requests  and container  authorize() and rules() method
	public function rules(): array
	{
	    return [
		'title' => 'required|unique:posts|max:255',
		'body' => 'required',
	    ];
	}
	public function store(StorePostRequest $request): RedirectResponse
	{
	    // Retrieve the validated input data...
	    $validated = $request->validated();
	 
	    // Retrieve a portion of the validated input data...
	    $validated = $request->safe()->only(['name', 'email']);
	    $validated = $request->safe()->except(['name', 'email']);
	 
	    // Store the blog post...
	 
	    return redirect('/posts');
	}
	
	// Customizing The Error Messages
	public function messages(): array
	{
	    return [
		'title.required' => 'A title is required',
		'body.required' => 'A message is required',
	    ];
	}
	
        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password)
        ]);
        
        		
-----------------------------------------------------------------------------------------------------------------------------------------
			Laravel Routes

# Route Model binding
-- Laravel route model binding provides a convenient way to automatically inject the model instances directly into your routes
-- you can inject the entire User model instance that matches the given ID
	// Route definition...
	Route::get('/users/{user}', [UserController::class, 'show']);
	 
	// Controller method definition...
	public function show(User $user)
	{
	    return view('user.profile', ['user' => $user]);
	}	
-- {user} URI segment matches the $user variable in the controller which contains an App\Models\User type-hint

# Route Fallback
-- If a page not found in your laravel project then we can set a fallback route with a custom page
	Route::fallback(FallBackController::class);
	
	class FallBackController extends Controller {
		public function __invoke()
		{
		   return view('your_custom_404_page');
		}
	}
			
			
# Reverse Routing --  https://www.devstringx.com/reverse-routing-in-laravel
-- In Laravel, reverse routing refers to the process of generating URLs based on named routes defined in the application. 
-- This can be useful when you want to generate URLs dynamically in your views or controllers, rather than hardcoding them.			







			
						

			
-----------------------------------------------------------------------------------------------------------------------------------------
			Laravel Migrations
			
Migrations are like version control for your database, allowing your team to easily modify and share the application's database schema.			







-----------------------------------------------------------------------------------------------------------------------------------------
			Laravel Controllers
			
-- Laravel invokable controller -> Single Action Controller
-- A controller for a single action, action may call another methods from same controller
-- FallBackController also used __invoke() magic method


-- The __invoke() magic method is automatically called when an object called as a function.


-------------------------------------------------------------------------------------------------------------------------------------------
			Laravel Contracts
-- Laravel's Contracts are a set of interfaces that define the core services provided by the framework. Which will be implemented by
   laravel core service and respository classes
-- https://www.developer.com/design/the-repository-pattern-in-php/			
			
			
			
			
			
			
						
			
-------------------------------------------------------------------------------------------------------------------------------------------
			Laravel Docker && Laravel Sail


docker exec -it laravel-app composer create-project --prefer-dist laravel/laravel:5.* .
docker exec -it laravel-app ls -la
docker exec -it laravel-app chmod -R 777 .
docker exec -it laravel-app php artisan --version
docker exec -it laravel-app composer update --with-all-dependencies
docker exec -it laravel-app php artisan optimize	
docker exec -it laravel-app php artisan migrate:rollback		
docker exec -it db  mysqldump -ularavel5 --password=secret laravel5 > laravel5.sql



						
-----------------------------------------------------------------------------------------------------------------------------------------
			Laravel Packages

As a PHP developer, we must be familiar with how to use frameworks. Frameworks make the process of development easier by simplifying common
practices used in developing major web projects such as packages, modules, plugins, and even components. As of now, there are over 500 laravel
packages on. 

Most popular laravel packages:
1. Cashier
2. Socialite
3. Horizon
4. Passport
5. Scout
6. Spatie
7. Entrust
8. Laravel Debugbar
9. Laravel User Verification
10. Laravel Mix
11. Laravel GraphQL
12. No Captcha
13. Laravel Backup
14. Migration Generator
15. Eloquent-Sluggable
16. Laravel Admin Panel Generator
17. Laravel Ecommerce Packages
18. Laravel SEO Packages
19. Laravel Sanctum

-----------------------------------------------------------------------------------------------------------------------------------------
				Design Patterns in Laravel 

1. Facade Design Pattern (Structural Design Pattern)
-- Provides a simplified interface to a library, a framework or any other complex set of classes.
-- 





---------------------------------------------------------------------------------------


laravel vs codeigniter
https://www.guru99.com/laravel-vs-codeigniter.html









